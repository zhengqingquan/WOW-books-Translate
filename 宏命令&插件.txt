https://github.com/Gethe/wow-ui-source/tree/beta/Interface/AddOns/Blizzard_APIDocumentationGenerated

https://github.com/tomrus88/BlizzardInterfaceCode

https://wowpedia.fandom.com/wiki/World_of_Warcraft_API

https://develop.battle.net/documentation/world-of-warcraft

http://bbs.ngacn.cc/read.php?tid=4655386

https://wowwiki.fandom.com/wiki/Portal:Interface_customization

https://wowwiki.fandom.com/wiki/World_of_Warcraft_API

现在魔兽分为三个版本，live版，ptr版、beta版，class版

北美官网推荐教程：《宏命令完全指南》 
这是从WOWWiki翻译下来的一篇文章，WOW美服官方推荐的宏教程。
宏作为WOW的有机组成部分，按理来说应当是暴雪官方给一个技术资料出来。
很可惜，基本算是没有。
所以挑选了这篇比较权威的文档进行了翻译。
另外关于/in，解释一下，这个现在用的很普遍，因为它是ACE库中的一个命令，而很多插件用到这个库，所以大家的客户端里往往都有。
但因为不是标准命令，所以文中没有提到。 



------------------------------------------------------------------------------------------------
时间：2009-04-13 
     宏命令全表：http://bbs.ngacn.cc/read.php?tid=2329476&fpage=1

------------------------------------------------------------------------------------------------
时间：2014-11-11 
[深入教学]宏命令的书写法则及其优化
术语
判断表达式，判断式(Option Set)：由若干判断项组成，封闭在方括号[]中的真值表达式。继承自安全模板，能在受保护环境下允许运作的唯一判断形式。


一，写宏的基本法则
宏最主要的应用是带有判断的施法，这也是下文主要应用的模型。一个典型的这种宏可以抽象成以下形式：

Code c:

/cast [表达式1-1][表达式1-2]技能1;[表达式2]技能2;技能3 
--宏的模型 

[项1,项2,项3, ...] 
--表达式的模型 
--注：表达式中定义单位target=或@不是一种判断条件，但它重新指定了后续所有涉及目标的判断和最终技能施放的对象。比如指定了@mouseover后，后续的help/exists/dead之类的判断都会基于鼠标悬停的单位。
在这个模型下，讨论：

1. 逻辑及判断顺序(法则一，！极为重要)
涉及判断就有真值，但是不要被这个带有浓重编程和数学色彩的词吓倒。概括来说就两句话：
<1>方括号内各分项之间是AND的关系，用逗号间隔，只有各个分项都为真整个方括号(表达式)才为真。方括号内各项之间没有顺序要求。
<2>各个方括号之间是OR的关系，判断顺序是从左至右，遇到第一个方括号为真时即结束判断，而忽略其后的所有项目。
大部分宏出错/不能用/判断混乱的原因就是在此。写宏的时候必须把条件强的(或者说优先级高的)判断放到前面，弱的(泛用型的)判断放到后面。举个例子，昨天回答了问答区一个人的提问，他的宏

Code c:



1:
2:


#showtooltip 
/cast [nomod,spec:2]炼狱冲击;[nomod,target=mouseover,exists,harm,spec:2]炼狱冲击

无法对鼠标悬停目标放。究其原因就是，[nomod,spec:2]这一个表达式弱于后者[nomod,target=mouseover,exists,harm,spec:2]，后者不仅需要无修饰键和第二专精，同时需要存在一个可攻击的鼠标悬停目标才会为真，导致了后者为真时前者一定为真。按照上文的<2>，从左至右的顺序将永远是前者表达式率先为真，因而无法对悬停目标施放炼狱冲击。修改的方法很简单，把两个判断调换位置即可：

Code c:



1:
2:
3:


#showtooltip 
/cast [nomod,target=mouseover,exists,harm,spec:2]炼狱冲击;[nomod,spec:2]炼狱冲击 
--修改后的宏

当然我在回答中还给出了优化方案，后文会详细介绍如何优化。

2. 技能整合(法则二)
对于把多个技能整合进一个/cast命令里，在不同的条件下自动判断施放不同的技能，只有一条格式法则：不同技能之间用分号;间隔。具体可以参照本章开头提出的宏模型。
要注意，一个/cast任何情况下至多只能施放一个技能，而且各个方括号之间仍旧遵循上文提出的<2>判断顺序法则。

3. 技能堆叠(法则三)
如果要做到一键同时放出两个或更多的技能，必须有多行/cast命令，这就是技能堆叠。这种宏通常用于爆发技能，喝药开饰品开技能需要同时完成。
其法则是：至多只能拥有一个产生/受到GCD影响的技能，幸运的是爆发类技能和药水等物品几乎都设计成不占用GCD。

Code c:



1:
2:
3:
4:


#showtooltip 
/cast 奥术强化 
/use 13 
/use 14

这样的宏是可行的，因为饰品和[奥术强化]本身并不产生GCD，甚至再加两行

Code c:

/cast 气定神闲 
/cast 奥术冲击
也是合法的。但是，形如以下的宏是非法的：

Code c:



1:
2:
3:
4:


#showtooltip 
/cast 驱邪术 
/cast 审判 
/cast 十字军打击

因为三者都产生GCD和/或被GCD影响，最终的效果是只相当于第一行[驱邪]有用。不要妄图这种方法能实现按优先级施放技能。

4. 技能替代(法则四)
技能替代是一个十分有意思的机制，自CTM引进。这种机制允许某[基础技能]在特殊情况下被另一个[替代技能]替代，而即便在替代的情况下，通过宏命令施放[基础技能]时会自动定向到[替代技能]，其最终的结果是正常施放[替代技能]，宏的图标也会随之变化。
这种机制有两种情况：
1)单向的替代，/cast [替代技能]不会施放出基础技能，但是/cast [基础技能]是任何情况下通用的。
举例：神牧的[圣言术：罚]在黄轮和蓝轮下转换成[静]和[佑]，只要宏

Code c:



1:
2:


#showtooltip 
/cast 圣言术：罚

就能自动根据轮的颜色转换技能，但因为这是[罚]被单向地替代，反过来如果宏里写[静]或[佑]，在红轮下就会放不出技能。
2)双向的等价，[基础技能]和[替代技能]是完全等价的，就如同一个技能，任何情况下用宏施放任意一个技能的结果都是放出当前激活的那一个。比如[腐蚀术]和[献祭]两者，SS玩家可以分别在不同天赋下试试。
这种机制对于写宏非常有利，我们不需要为了技能被替换而另开一个宏。更深入的一点，以下两个技能需要重点提及：

Code c:



1:
2:
3:


#showtooltip 
/cast 秘法炸弹 
--这个技能对应法师75级天赋中的[虚空风暴]，[寒冰炸弹]和[活动炸弹]。[秘法炸弹]被单向替代。


Code c:



1:
2:
3:


#showtooltip 
/cast 神圣爆发 
--这个技能对应牧师90级天赋，也是单向替代。

如果其他职业也有类似的天赋基础技能，请欢迎补充。


二，写宏的灵魂：逻辑和优先级
笔者和自己圈子里的很多人说过，写宏其实和编程没多大关系，需要的是一点数学的逻辑思维。尤其是那些技能整合宏，对在各种判断条件下到底哪一个技能才是优先的必须心里有谱。实际上这是上文中法则一之<2>的推演，本质上仍旧是按照越优先越靠前的方式排列整个技能和判断序列。正因如此，上文法则一才是宏最最重要的法则，而优先级正是写宏的灵魂。

Code c:



1:
2:
3:
4:
5:
6:
7:
8:


#showtooltip 
/cast [help,dead][mod:shift,help][mod:shift,@player]Soulstone;[mod]Soul Link;Unending Resolve 
/targetlasttarget [help,dead] 
--比如这个术士宏，它的逻辑等价于： 
--如果[目标死亡且可协助]或[按住shift并且目标可协助]或[其他按住shift的情况下对自己]施放[灵魂石] 
--否则，如果[有按下其他任何修饰键]则施放灵魂链接 
--否则任何其他情况下放盾墙 
--此外，如果[目标死亡且可协助]还会顺带切换回之前的目标，目的是战复后目标切回怪身上

有人可能会问，[help,dead][mod:shift,help][mod:shift,@player]这一串看不懂，为什么先来个shift修饰后面又来一个，这里就涉及到优先级的问题了。
首先[help,dead]指定了[目标死亡且可协助]的情况，它是优先级最高的，只要满足这两个条件，其他任何条件不管满足不满足都会战复目标。
其次，[mod:shift,help]这一判断代表[按住shift并且目标可协助]，但是它还有个隐藏条件。因为要判断到这一层，首先必须前者[help,dead]为假，也就是当[目标不可协助或者目标不死]的情况。所以其实这个判断应该是[(目标不可协助或者目标不死)并且按住shift并且目标可协助]，由于不可协助和可协助互斥，所以实际判断的真值应该是[目标不死并且按住shift并且目标可协助]，满足这个条件，对目标放灵魂石。
再次，[mod:shift,@player]，这里只用了一个判断即shift修饰，上文说过@player不是判断条件。但因为前一个判断已经有一种按下shift的情况被取走了，那么这里的判断表示[其他按住shift的情况下对自己]施放灵魂石。
然后，[mod]是个广义的修饰键判断，当alt/shift/ctrl中任何一个或多个被按下是都为true。当然shift在前面的判断中被取走，那么这里表示的是[按下alt/ctrl中任何一个或两个]，他等同于[有按下其他任何修饰键]则施放灵魂链接。
最后，无尽决心没有任何判断，它是恒真的。也就是在其他任何条件下都会施放无尽决心。

上面这个例子有些复杂，下面会通过一个相对简单的实例来阐述如何运用这种模式写宏。
法师法术反制及焦点反制/悬停解诅咒整合宏
要求是：焦点可攻击按住任何修饰键都是焦点反制，不按修饰键且敌对目标是对目标反制，鼠标悬停到友善目标是解诅咒，目标是友善目标是解诅咒，默认状况下是对目标的反制。
首先就是厘清优先级。
*笔者个人的习惯是修饰键优先级比悬停高，也就是按了修饰键应该尝试对焦点放而不是对悬停解诅咒；而同时悬停的优先级应该比目标的优先级高。这个优先级可以根据自身需要调整。
那么整理之后的优先级就是：
第一优先级：焦点反制敌对目标，判断式[mod,@focus,exists,harm]
第二优先级：悬停解可协助目标诅咒，判断式[@mouseover,exists,help]
第三优先级：对友善目标解诅咒，判断式[help]
第四优先级：敌对目标反制，判断式[harm]
第五优先级：反制，无判断式(恒真)
*要注意，harm和help有关系，但并不是help=noharm或者harm=nohelp。harm代表目标可攻击，help代表目标可协助(能给他加血上buff等)，此外还有一种既不能攻击也不能协助的状态，称为“被动(Passive)”。
现在可以直接写出宏了，那就是：

Code c:



1:
2:
3:


#showtooltip 
/cast [mod,@focus,exists,harm]法术反制;[@mouseover,exists,help][help]解除诅咒;[harm]法术反制;法术反制 
--第一行的#showtooltip不是命令行，它的作用是能在鼠标提示上显示技能的有关信息

这个宏运作起来是符合要求的，但是可以继续优化。从逻辑上而言，第四与第五优先级可以合并，而且exists没必要与harm和help连用。因此最终的宏是：

Code c:



1:
2:


#showtooltip 
/cast [mod,@focus,harm]法术反制;[@mouseover,help][help]解除诅咒;法术反制



三，终极形态：宏的优化
宏有字数限制，每个汉字或是英文字母都占1字，最后还有个换行符占1字，总共加起来不能超过256个字符(不包括标题行)。因此在一些特殊的环境下，写出来的宏会很长很长，那么优化有时候就有必要。
优化的目的是让宏看起来更整洁优美，更精短同时兼顾功能，以方便日后修改等操作。

优化一：注意判断之间的关系，去掉多余的判断项。

Code c:



1:
2:


#showtooltip 
/cast [mod]技能1;[nomod]技能2

后面的nomod判断就是多余的，可删除。

优化二：去掉多余的exists。
当exists与harm，help，dead等本身就需要判断“目标状态”的项目在同一个方括号内连用时，exists多余。因为后者为真，exists一定为真；相反exists为假后者一定为假。

Code c:



1:
2:


#showtooltip 
/cast [@mouseover,exists,help][]快速治疗

其中的exists可以删除。

优化三：恒真判断([])
它就是一个空的方括号，在任何条件下都返回true。当最后的收尾技能和前一个相同时，不需要使用分号重复写技能名，只需要一个空括号即可。
比如还是上面的快速治疗宏，其等同于

Code c:



1:
2:
3:
4:
5:


#showtooltip 
/cast [@mouseover,help]快速治疗;快速治疗 
--可以简并成 
#showtooltip 
/cast [@mouseover,help][]快速治疗


优化四：灵活运用/stopmacro
它的作用是在这一行终止当前宏运行，可以加判断式。

优化五：慎用nochannelling项
特别是暗牧！

Code c:



1:
2:


#showtooltip 
/cast [nochannelling:精神鞭笞]精神鞭笞

若你的延迟不是非常低，这宏会严重浪费输出时间。原因是它需要本地客户端停止引导才会允许施放，而此时服务器早就引导完了。正确的方法是用显示即使延迟的施法条插件，比如Quartz，在引导进入红区时施放下个鞭笞。

优化六：注释符(--，两个连写的减号)
一种特殊命令，写在一行的最开头，作用是把一整个命令行全部注释掉，让其不产生任何效果。
实用性的例子如打断施法+反制宏，当插了反制雕文的时候，打断施法这一行就没有必要了。这时候就可以把宏改写成如下形式：

Code c:



1:
2:
3:


#showtooltip 
--/stopcasting 
/cast 法术反制

注意注释符的用法。下次需要他有作用的时候，简单地删除注释符即可。用它保存暂时不用的长段复杂代码，需要时删除以释放，方便有效。

优化七：图标选问号，#showtooltip后面留空
如果是整合技能宏，一般情况下图标都选问号，这样图标就会跟随技能变化。而#showtooltip这一行一般不需要后面附加技能。当在特殊情况下，例如写一个气定奥冲绑定宏，气定在奥冲之前，但是非要把图标成奥冲的时候，才写成：

Code c:



1:
2:
3:


#showtooltip 奥术冲击 
/cast 气定神闲 
/cast 奥术冲击



四，常用宏模板
1. 治疗/伤害技能混合宏，附带指向施法，或者用于解buff和攻击性技能组合：

Code c:



1:
2:


#showtooltip 
/cast [@mouseover,help]治疗技能;[harm]攻击技能;治疗技能


2. 治疗指向宏，无指向对目标：

Code c:



1:
2:


#showtooltip 
/cast [@mouseover,help][]治疗技能


3. 经典的修饰键整合宏：

Code c:



1:
2:


#showtooltip 
/cast [mod]技能1;技能2

或者更多的技能：

Code c:



1:
2:


#showtooltip 
/cast [mod:shift]技能1;[mod:ctrl]技能2;[mod]技能3;技能4


4. 翻页宏：

Code c:



1:
2:
3:


#showtooltip 
/cast 技能 
/changeactionbar n

这个宏最近已经被玩坏了，n可取1-6。

5. 花式宏，双修饰键/三修饰键判断：

Code c:



1:
2:


#showtooltip 
/cast [mod:alt,mod:ctrl,mod:shift]技能

按照需要自己整合，就是这个套路。

6. 花式用法：
拆分1+alt和alt+1(按键顺序)。
*1+alt指的是先按住1然后不放去按alt，保持alt松开1(此时放技能)，最后松开alt。
这个用法需要关闭界面设置中的点击施法选项。
按键绑定中绑定alt+1，在这个动作按钮上放技能1
建立一个宏

Code c:



1:
2:


#showtooltip 
/cast [mod]技能2;技能3

把这个宏放到键1上。
其结果就是alt+1放出技能1，1+alt放出技能2，直接按1是技能3。

7. 智能坐骑宏
自带的随机坐骑真的有点，*咳咳*。

Code c:



1:
2:
3:
4:


#showtooltip 
/run local m=GetCurrentMapAreaID() if (m==610 or m==613 or m==614 or m==615) then CastSpellByName("深渊海马") end 
/cast [flyable]飞行坐骑 
/cast [swimming]水生坐骑;陆地坐骑

这种带判断的上古宏对于坐骑还是可以用滴！用它能够只在瓦斯琪尔召唤海马。


http://bbs.ngacn.cc/read.php?&tid=7526940


























我术士拉糖喊话是，热翔出炉，众君品尝！！ 
术士拉马桶：“吃屎勿忘拉屎人


有/in命令的宏要安装插件
in需要lib支持
你可以安装这个
[[





http://www.curse.com/addons/wow/slash-in]]
并且详细阅读人家的说明 


爆发宏：(各种玩具)
/Y 不要小看一位术士大师！！！
/cast 灵魂收割
/cast 火焰石
/use 航海家的滑哨
/use 德拉诺智力药水
/cast 胜利之手
/咆哮
/use 协同战旗
/use 德鲁伊和牧师雕像组
/cast 魔典：恶魔卫士
/use 卡多雷风铃
/use 食火者的瓶子
/use 炽燃之翼
/use 巴肖克之魂
/use 大法师瓦格斯的备用法杖
/use 炉石游戏盘
/use 亲笔签名的炉石卡牌
/use 守备官盔甲打磨包

拉门：(改编自牧师神歌宏)
/y 台下的观众们，举起你们的小手，随着节奏开始摇摆吧！~
/in 1 /y 苍茫的天涯是我的爱
/in 2 /y 连绵的青山脚下花正开
/in 3 /y 什么样的节奏是最呀最摇摆
/in 4 /y 什么样的歌声才是最开怀
/in 5 /y 谢谢各位，请点门！！！
/施放 召唤仪式 

拉糖1：(祖师爷台词)
/y 喝吧，地狱咆哮，这是兽人的命运。别问我代价是什么，蠢货
/cast 制造灵魂之井
/use 泡泡棒
/use 食火者的瓶子
/use 航海家的滑哨

拉糖2：(比较老的一个段子)
/cast 制造灵魂之井
/in 1 /y 叹项羽乌江自刎
/in 2 /y 惜吕布貂蝉余恨
/in 3 /y 问英雄为何早亡
/in 4 /y 只因阵前没拿糖

地狱火大招：(改编自DK大军宏)
/cast [@cursor] 召唤地狱火
/in 1 /e 召唤出了地狱火一家四口！！！
/in 2 /e 召唤出了灵魂神龛
/in 3 /e 召唤出了时空教程
/in 4 /e 召唤出了唤醒者的忠诚
/in 5 /e 召唤出了循环仪式

战复宏：(改编自伊利丹台词)
/cast 灵魂石
/y 正在战复%t，是，是，战复很慢！！
/in 1 /y 我……被削弱了……一万年！
/in 2 /y 又被迫为你们拉糖拉门！
/in 3 /y 现在别人战复瞬发唯独我的战复要读条还要踏马3秒！
/in 4 /y 你们这是自寻死路！ 

阿拉希战场指挥宏：
/R 依我计，铁，进可攻退可守，必先取之，望1.2队先锋速往。木，易守难攻，总揽全局，若木可定，家安已，3队必先争之。众潜行迂回与矿兽之间，择机取之，扰联盟与奔袭之间。袭一处，退其兵，去其势，则大局可定矣。 

山寨嗜血宏：(部落萨满或法师可以根据各自debuff修改最后一句)
/use 狂怒战鼓
/in 1 /e 开启了山寨嗜血！
/in 2 /e 播放起了珍藏多年的小电影！
/in 3 /e 发现大家的某个部位变大了
/in 10 /e 发现大家坚持了10秒
/in 20 /e 发现大家坚持了20秒
/in 30 /e 发现大家坚持了30秒
/in 31 /e 发现大家都筋疲力尽了

火箭腰带宏：
/use 6
/s 我已开启工程腰带
/in 1 /s 读音：gong chen yao dai
/in 2 /s 日文：工事の帯
/in 3 /s 法语：Ceinture du gnie
/in 4 /s 使用说明：地精产品震撼人心，绝对安全！！！！
/in 5 /s 等你读完的时候你们伟大的术士已经漏油而死了